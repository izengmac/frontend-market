{"ast":null,"code":"var _jsxFileName = \"/Volumes/SP Stream S/market2/my-react-app/src/pages_management/ClientsOrders.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Header from './';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ClientsOrders() {\n  _s();\n  // State to store the table data fetched from the API\n  const [tableData, setTableData] = useState([]);\n\n  // Effect hook to fetch data from the API when the component mounts\n  useEffect(() => {\n    fetchDataFromApi();\n  }, []);\n\n  // Function to fetch data from the API\n  const fetchDataFromApi = () => {\n    // Fetch data from your API endpoint\n    // Replace 'apiEndpoint' with your actual API endpoint\n    fetch('apiEndpoint').then(response => response.json()).then(data => {\n      setTableData(data); // Set the fetched data to the state\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n    });\n  };\n\n  // Function to add a new row to the table\n  const addRow = () => {\n    // Add your logic here to add a new row to the table data\n    // For example, you can push a new object to the tableData state\n    const newRow = {\n      // Define properties for each column in the new row\n      // Example:\n      id: tableData.length + 1,\n      column1: 'New Value 1',\n      column2: 'New Value 2',\n      column3: 'New Value 3',\n      column4: 'New Value 4'\n    };\n    setTableData(prevData => [...prevData, newRow]); // Add the new row to the table data state\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addRow,\n      children: \"Add Row\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Column 1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Column 2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Column 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Column 4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: tableData.map(row => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: row.column1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: row.column2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: row.column3\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: row.column4\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this)]\n        }, row.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(ClientsOrders, \"qcVQMfdRY2vxgSp5dutEfuJRk7k=\");\n_c = ClientsOrders;\nexport default ClientsOrders;\nvar _c;\n$RefreshReg$(_c, \"ClientsOrders\");","map":{"version":3,"names":["React","useState","useEffect","Header","jsxDEV","_jsxDEV","ClientsOrders","_s","tableData","setTableData","fetchDataFromApi","fetch","then","response","json","data","catch","error","console","addRow","newRow","id","length","column1","column2","column3","column4","prevData","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","row","_c","$RefreshReg$"],"sources":["/Volumes/SP Stream S/market2/my-react-app/src/pages_management/ClientsOrders.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Header from './'\n\nfunction ClientsOrders() {\n  // State to store the table data fetched from the API\n  const [tableData, setTableData] = useState([]);\n\n  // Effect hook to fetch data from the API when the component mounts\n  useEffect(() => {\n    fetchDataFromApi();\n  }, []);\n\n  // Function to fetch data from the API\n  const fetchDataFromApi = () => {\n    // Fetch data from your API endpoint\n    // Replace 'apiEndpoint' with your actual API endpoint\n    fetch('apiEndpoint')\n      .then(response => response.json())\n      .then(data => {\n        setTableData(data); // Set the fetched data to the state\n      })\n      .catch(error => {\n        console.error('Error fetching data:', error);\n      });\n  };\n\n  // Function to add a new row to the table\n  const addRow = () => {\n    // Add your logic here to add a new row to the table data\n    // For example, you can push a new object to the tableData state\n    const newRow = {\n      // Define properties for each column in the new row\n      // Example:\n      id: tableData.length + 1,\n      column1: 'New Value 1',\n      column2: 'New Value 2',\n      column3: 'New Value 3',\n      column4: 'New Value 4'\n    };\n    setTableData(prevData => [...prevData, newRow]); // Add the new row to the table data state\n  };\n\n  return (\n    <div>\n      <button onClick={addRow}>Add Row</button>\n      <table>\n        <thead>\n          <tr>\n            <th>Column 1</th>\n            <th>Column 2</th>\n            <th>Column 3</th>\n            <th>Column 4</th>\n          </tr>\n        </thead>\n        <tbody>\n          {tableData.map(row => (\n            <tr key={row.id}>\n              <td>{row.column1}</td>\n              <td>{row.column2}</td>\n              <td>{row.column3}</td>\n              <td>{row.column4}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default ClientsOrders;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}